//컴퓨터학전공 20230779 김서윤
/*
여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.
지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.

오답: bfs로 풀었는데 메모리 오버플로우가 뜨고 잘 안 돌아감 > dfs로 변경
	map이랑 count가 사이즈가 커서 main 밖에서 선언
	대소관계 신경 써
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int counting(int i, int j, int M, int N);
int move[4][2] = { {0, -1},{ 0, 1}, {1,0},{ -1,0} };
int map[501][501];
int count[501][501];

int main(void)
{
	int M, N;
	int i, j;

	scanf("%d %d", &M, &N);

	for (i = 0; i < M; i++)
		for (j = 0; j < N; j++) {
			scanf("%d", &map[i][j]);
			count[i][j] = -1;
		}
	count[0][0] = 1;

	counting(M - 1, N - 1, M, N);

	printf("%d", counting(M - 1, N - 1, M, N));

	return 0;
}

int counting(int i, int j, int M, int N)
{
	int idx, nI, nJ;

	if (count[i][j] != -1)
		return count[i][j];

	if (i < 0 || i >= M || j < 0 || j >= N)
		return 0;

	for (idx = 0; idx < 4; idx++) {
		nI = i + move[idx][0];
		nJ = j + move[idx][1];
;
		if (map[i][j] < map[nI][nJ])
			count[i][j] += counting(nI, nJ, M, N);
	}
	count[i][j]++;

	return count[i][j];
}
